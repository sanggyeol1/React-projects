[
작업폴더 shift +우클릭 후 npx create-react-app 프로젝트명 적으면 프로젝트 생성됨

UI를 복사붙여넣기할수 있는 react bootstrap
get start 하고 설치하란대로 하면 됨 -> npm install react-bootstrap bootstrap(맨날 바뀌긴 함)
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
  integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"
  crossorigin="anonymous"
/> + 이 코드를 index.html head태그 내에 복붙하면 됨

버튼 뿐 아니라 동적인 ui등등도 복붙 가능
import {Button,Container,Nav,Navbar} from 'react-bootstrap' 이런식으로 한번에import 가능함


background-size: cover;
background-position: center;
을 통해서 창의 크기가 변해도 상대적 위치는 변하지 않음


import bg from './img/bg.png'

<div className='main-bg' style={{backgroundImage : 'url('+bg+')'}}></div>을 통해서html에서 img를 넣을 수 있다. 다만 외부에 호스팅해둔 이미지라면 이미지 링크만 넣으면 됨

react bootstrap에 colmn이나 grid 검색하면 3등분진열코드 등등 나와있음

public폴더 : 리액트 사이트발행 전에 압축할때 src파일은 형태와 이름이 변하지만 public폴더는 변하지 않는다. 그래서 이미지들을 여기에 몰아넣는것이 좋다. public폴더 안의 이미지 사용할땐 그냥 /이미지경로 사용하면 된다.
다만 주의할 점은 사이트발행할때 주소에 따라서 오류가 나는 경우가 있는데 
<img src={process.env.PUBLIC_URL + '/logo1.png'}/> 이런식으로 쓰는걸 권장한다.


변수 또는 컴포넌트가 길어지면 파일을 따로 만들고   export {data} import {data} from './data.js' 로 사용 가능함


import 뭐시기 from './뭐시기' -> 나의 폴더경로
import 뭐시기 from '뭐시기' -> 라이브러리 임포트
]





[
라우터 : 페이지 나누기
리엑트는 single page application으로 index.html하나만 사용한다.
페이지 나누는 법(리액트)
1. 컴포넌트 만들어서 상세페이지 내용 채움
2. 누가/detail접속하면 그 컴포넌트 보여줌

(react router-dom라이브러리 쓰면 라우팅 쉽게 만들 수 있음)
npm install react-router-dom@6 하고 index.js파일로 가서
<App/>을 <BrowserRouter></BrowserRouter> 로 감싸면 됨

<Routes>
    <Route path="/detail" element={<div>상세페이지임</div>}/>
    <Route path="/cart" element={<div>장바구니 페이지임</div>}/>/>
</Routes>
이런식으로 어떤 경로로 들어가느냐에 따라 보여주는 html을 달리 할 수 있음 "/"는 메인페이지를 뜻함 이떼 중괄호 안에 main페이지의 모든 요소를 담아서 라우팅을 할 수 있다.

<Link to="/">홈</Link>
<Link to="/detail">상세페이지</Link> 이런식으로 버튼을 만들어서 이동할수도 있다.

페이지를 나누어서 라우팅을 할때 pages라는 폴더를 하나 만들어서 다 밀어넣는게 좋다.
]






[
기능몇가지
1. useNavigate() : 페이지 이동 도와줌
let navigate = useNavigate() 라고 선언하고
어디든 onClick={()=>{ navigate('/')}} 붙여서 쓰면 됨
navigate(1)은 앞으로가기 navigate(-1)은 뒤로가기 버튼과 동일, 2적으면 2칸이동함

2. 404페이지
<Route path="*" element={ <div>없는페이지에요</div> }/> 를 통해서 만들수 있음

3. Nested Route (Outlet) : 동적인UI도 만들수있음
<Route path="/about" element={ <Detail/> <Outlet/> }> /about으로 접속시 <Detail/> 보여줌
    <Route path="member" element={ <div>멤버임</div> }/> /about/member 접속시 Outlet 위치에보여줌
    <Route path="location" element={ <div>위치임</div> }/> /about/location 접속시 Outlet 위치에보여줌
</Route> 


URL파라미터 : 0번째신발, 1번째신발, 2번째신발등등의 여러개의 detail페이지를 만들고싶을때 사용
<Route path="/detail/:id" element={ <Detail shoes={shoes}/> }/>
이렇게 짜면 detail/12 으로 접속해도 똑같이 detail페이지를 보여준다.

유저가 URL파라미터에 입력한거 가져오려면 let {id} = useParams() 하고 id변수 쓰면 됨
(참고)
path 작명시 url 파라미터는 몇번이고 사용가능합니다. detail/:어쩌구/:저쩌구 이런식
]






[
중요!!
object 배열에서 id가 1인 object찾는법 :

let obj = [
    { id: 0, name: 'Max', age: 23 },
    { id: 1, name: 'John', age: 20 },
    { id: 2, name: 'Caley', age: 18 }
]
let result = obj.find((e) => e.id == 1) (리턴중괄호는 동시생략가능)
console.log(result) 하면
{ id: 1, name: 'John', age: 20 } 출력
let result = state.findIndex((e) => e.id == 2)
console.log(result) 하면
2 출력



object 배열에서 이름순으로 정렬하기 버튼
<button onClick={()=>{
    let copy = [...shoes]

    copy.sort((a, b)=>{
        if(a.title > b.title) return 1;
        if(a.title < b.title) return -1;
        return 0;
    })
    setShoes(copy)
}}>정렬</button>
]








[
styled component : className넣고 css파일 안가도 js에서 모든걸 해결 가능한 라이브러리, 스타일이 다른 js파일로 오염되지 않음, 페이지 로딩시간 단축

(참고)css파일 작명할때 App.module.css라고 작명하면 이 파일은 App.js에만 종속이 된다.

방법
1. npm install styled-components 로 설치
2. import styled from 'styled-components' 로 불러옴
3. let Btn = styled.button`
    background : ${ props => props.bg };
    color : ${props => props.bg == 'blue' ? 'white' : 'balck'};이런식으로 간단한 코드도 작성 가능
    padding : 10px;
`
3. <Btn bg="yellow">버튼</Btn>
하면 노란색 버튼이 나옴

또는 
let Box = styled.div`
    padding : 10px;
    background : grey;
`
<Box>박스</Box>
하면 회색 박스가 나옴

단점
1. js파일 매우 복잡해짐
2. 중복스타일은 import할텐데 css와 다를바 없다.
3. css협업시 숙련도이슈
]






[
컴포넌트의 Lifecycle와 useEffect

Lifecycle : 
페이지에 장착되기도 하고(mount) (갈고리 담)
업데이트==재랜더링 도 되고(update) (갈고리 담)
필요없으면 제거되고(unmount) (갈고리 담)

mount, update, unmount될때 실행될 코드를 갈고리를 담

예전엔
class Detail2 extends React.Component{
    componentDidMount(){
        마운트시 실행코드
    }
    componentDidUpdate(){
        업데이트시 실행코드
    }
    componentWillUnmount(){
        언마운트시 실행코드
    }
}이런식으로 갈고리를 달았는데 요즘엔

function Detail(){
    useEffect(()=>{
        마운트, 업데이트 시 실행코드
    })
}
근데 useEffect바깥에 코드짜도 똑같이 작동하는데?
useEffect쓰는 이유 : 실행시점이 약간 다름. useEffect바깥에 있으면 윗줄에있는것부터 실행되는데 useEffect는 html랜더링 이후에 동작함 
그래서 오래걸리는 코드들을 안에 넣어서 먼저html을 보여주는게 좋음 (반응 즉각즉각)
예를들면 :
1. 어려운 연산
2. 서버에서 데이터 가져오는것
3. 타이머 장착

sideEffect : 핵심기능이 아닌 부가기능
useEffect : 부가기능을 넣는 바구니

useEffect(()=>{
    setTimeout(()=>{ setWarn(false) },2000)
}, [count])
[count]를 넣음으로써 재랜더링될때마다 무작정 실행되던 코드를 mount 시, count라는 state가 변할때만 실행되는 기능으로 바꿀 수 있다.
그래서 []만 넣으면 처음 mount될때 1회만 실행되게 제한을 걸 수 있다.

useEffect 안에 return()=>{ useEffect동작 전에 실행되는 코드 }
예를들면 타이머가 이미 있는 상황에서 기존 타이머를 제거해달라는 clean UP function을 쓰면 됨 == clearTimeout

또는 서버에 데이터 요청하는 코드가 2초 걸린다고 가정했을 때 2초 사이에 재 랜더링이 되어버리면 2초걸리는 코드를 또 실행하기 때문에 기존의 요청을 없애버리는 clean up function이 필요한것이다.

참고 : clean up function은 mount시 실행이 안되고 unmount시 실행된다.

결론 :  useEffect는  마운트, 재랜더링 시 동작,
useEffect내의 return()=>{}는  재랜더링, 언마운트시 동작
재랜더링에서 겹쳤다면 return()=>{}가 먼저 실행

useEffect(()=>{ }) 1. 재랜더링마다 코드실행하고싶으면
useEffect(()=>{ },[]) 2. 마운트시 1회 코드실행하고싶으면
useEffect(()=>{ },[count]) 3. 특정 state변경시에만 실행하려면

useEffect(()=>{ 
    return()=>{}
},[]) 
4. 언마운트시 1회 코드실행하고싶으면, useEffect전에 clean up function 실행하고 싶으면

]



[
리액트에서 서버와 통신하려면 ajax
서버 : 부탁하면 진짜로 들어주는 프로그램
네이버웹툰서버 : 웹툰 요청하면 웹툰 보여주는 프로그램
페이지 위에 주소창이 get요청할수 있는 공간임 여기다가 주소를 입력하면 get요청과 동시에 새로고침이 됨. -> ajax를 사용하면 새로고침을 사용하지 않고 get/post요청이 가능함

ajax쓰려면 
1. XMLHttpRequest
2. fetch()

3. axios 요청 (json을 array나 object로 변환하지 않아도 된다는 편리성 보유)
터미널에 npm install axios, import axios from 'axios' 그 후
axios.get('https://codingapple1.github.io/shop/data2.json')
.then((data)=>{ console.log(data) }) 하면 데이터 출력됨
.catch((err)=>{ console.log(err) }) 하면 axios실패시 에러출력

...result.data 하면 result.data의 대괄호가 벗겨짐

로딩중 UI 짜는법 : axios요청 전후로 loading중 UI 띄우기, 숨기기 코드 작성하면 됨
근데 then뿐만 아니라catch에도 짜서 오류가 났을때도 로딩창을 숨겨주어야 함


axios POST요청 : 서버로 데이터 전송하는 POST요청
axios.post('/post요청을 받을 주소', {name : 'kim'})
이런 방식으로 서버에 데이터를 보내는 것임


동시에 ajax요청하는법 : 
Promise.all([ axios.get('/url1'), axios.get('/url2')])
.then(()=>{
    두개 다 성공했을때 실행코드
})

원래는 서버와 문자만 주고받을 수 있는데 oject와 배열을 받을 수 있는 이유 :
"{"name" : "kim"}" 이런방식으로 문자인 척을 해서 주고받을 수 있음 이러한 형태를 json이라고 함
그래서 js의 기본문법인 fetch를 사용할 때는 
fetch('url')
.then(result=>result.json()) 이런식으로 json을 array나 object로 변환코드 필요
.then(data => {})

]




[
    삼항연산자가 아닌 일반 if조건문을 쓰고싶으면
    function TabContent(props){
    if(props.tab == 0){
        return <div>내용0</div>
    }
    if(props.tab == 1){
        return <div>내용1</div>
    }
    if(props.tab == 2){
        return <div>내용2</div>
    }
}이런식으로 컴포넌트화해서 써야 한다.


function TabContent(props){
    return [<div>내용0</div>, <div>내용1</div>, <div>내용2</div>][props.tab]
}
센스좋으면 이렇게짜도 됨
]






[
전환에니메이션 주는 법 : 부착하면 에니메이션 나오는 className하나 만들고 원할 때 부착하면 됨

1. 애니메이션 동작 전 className 만들기
2. 애니메이션 동작 후 className 만들기
3. className에 transition 속성 추가
4. 원할때 2번 className추가

.start{
  opacity: 0; 안보임
}
.end{
  opacity: 1; 잘보임
  transition: opacity 0.5s;
}


구현이 엄청나게 복잡함
let [fade, setfade] = useState('')

useEffect(()=>{
    setTimeout(()=>{setfade('end')}, 10) //0.01초있다가붙임
    return()=>{setfade('')} //end를 떼었다가
},[props.tab])

return (<div className={'start' +fade }>
    { [<div>내용0</div>, <div>내용1</div>, <div>내용2</div>][props.tab]} 
    </div>)

왜 이렇게 복잡하게 짜냐?
리액트의 automatic batching 기능:

state 변경함수가 여러개 있으면 변경 될때마다 재랜더링 하는것이 아니라
마지막 state변경함수를 실행한 후에 한번만 재랜더링함
그래서 떼고 붙이는 동작이 한번에 이루어지기 때문에 setTimeout을 통해서 시간차를 두어 줘야 한다.

]




[
리액트같은 single page Application의 단점 : 컴포넌트 간의 state공유가 어렵다.
자식의 자식 컴포넌트에게 state를 전송해주고싶으면 props를 두번써야하는 번거로움이 있음 두번정도는 안복잡한데 10개정도 되면 너무 복잡함

해결방법 : 
1. context Api : 단점이많아서 잘 안쓰고 몰라도 ok

2. redux :
redux store.js 를 만들고 그곳에 state를 몰아 넣은 후 컴포넌트들이 빼서 씀

설치 : npm install @reduxjs/toolkit react-redux
셋팅 
1. store.js생성 후 
import { configureStore } from '@reduxjs/toolkit'

export default configureStore({
  reducer: { }
})  복붙후 
2. index.js 가서 import store from './store.js'하고
import { Provider } from "react-redux";하고
<Provider store={store}>로 App 감싸




redux state변경하는법 : 
1.state수정함수 만들기
2. 컴포넌트가 디스패치로 store.js에 수정함수 실행해달라고 메세지 보냄
dispatch(changeName('kim')) 하면 store.js에 action.payload로 "kim"이 들어간다.
dispatch로 store.js에 state 수정요청을 보내는 방식인데 좀 복잡하지만 이러한 방법으로 오류가 났을때 추척이 용이하다는 장점이 있다.
]



[
새로고침하면 state가 초기값으로 돌아간다.
-> 서버를 이용하면됨
-> 차선책으로 localStorage가 있음

로컬스토리지 특징
1. key : value 형태로 저장이 가능함
2. 문자만 저장가능함 (5MB)까지
3. 사이트 재접속해도 남아있음(브라우저 청소하면 삭제됨)
(세션스토리지는 날아감)

사용법 
localStorage.setItem('data','20') 치면 저장
localStorage.getItem('data') 하면 '20'출력
localStorage.getItem('data') 하면 삭제

데이터를 수정하는 문법은 없고 꺼내서 수정하고 다시 넣으면 된다.

array/object 저장하려면 : JSON으로 바꾸면 된다.
let obj = {name : 'kim'}

localStorage.setItem('data', JSON.stringify(obj)) 하면 저장됨
근데 json은 let 꺼낸거 = localStorage.getItem('data') 로꺼내도 json이기 때문에 JSON.parse(꺼낸거) 해줘야 함


Set을 활용하여 배열에서 중복 제거
set자료형이란 중복을 허용하지 않는 array이다.
Array.from()쓰면 set자료형을 다시 array로 바꿀 수 있다.
 useEffect(()=>{
        let 꺼낸거 = localStorage.getItem('watched')
        꺼낸거 = JSON.parse(꺼낸거)
        꺼낸거.push(찾은상품.id)
        꺼낸거 = [...new Set(꺼낸거)]
        localStorage.setItem('watched', JSON.stringify(꺼낸거))
    },[]) 이렇게 최근본 상품의 index번호를 모아볼 수 있음


]



[
    react-query 
실시간 데이터를 사용할때 좋음
npm install react-query

세팅 : index.js가서
import { QueryClient, QueryClientProvider } from 'react-query'
const queryClient = newQueryClient() 추가

<queryClientProvider client = {queryClient}></queryClientProvider> 로 App감싸기

axios요청이나 fetch로 서버에 데이터 요청을 할때

let result = useQuery('작명', ()=>
    axios.get('https://codingapple1.github.io/userdata.json')
    .then((a)=>{
      console.log('요청됨')
      return a.data
    }),
    { staleTime : 2000 }
  )
 이런식으로 요청을 감싸주면

장점1. 성공/실패/로딩중 쉽게 파악 가능
result.data/ result.error/ result.isLoading

    { result.isLoading && '로딩중'}
    { result.error && '에러'}
    { result.data && result.data.name} 이런식으로 로딩중이면 로딩중, 에러면 에러, 아니면 유저의 이름을띄워줌


장점2. 틈만나면 자동으로 재요청해줌
다른 창 들어갔다 나오면 refetch해줘서 항상 신선한 데이터를 맛볼 수 있다.
{staleTime : 2000}을 써주면 2초안에 다른창 들어갔다 나오면 refetch안함

장점3. 요청에 에러가 나면 알아서 3번 4번 retry 해줌 그래서 콘솔에 여러번 찍힘

장점4. 컴포넌트 간 state공유를 하지 않아도 된다. ajax요청해서 유저의 이름을 가져오는 코드를 2개 작성해도 react-query가 알아서 한번만 함

장점5. ajax결과 캐싱 가능 ex) 1시에 get요청 했던걸 기억해놓고 2시에 get요청할때 1시에 get요청 결과를 먼저 보여주고 get요청함(페이지 로드가 빠른 느낌을 줌)

]


[
    성능개선
크롬 React devaloper tools 설치 ㄱㄱ  : 
component탭 :  컴포넌트를 html로 풀어서 띄워주는데 컴포넌트로 보여줌, props나 state도 확인이 가능함

profiler 탭 : 성능저하되는 컴포넌트 범인찾기임 녹화버튼 누르고 이것저것 눌러보면 나의 액션들 중에서 어떤 컴포넌트가 로드되었는지 기록해줌 그리고 각 컴포넌트마다 몇초간 걸렸는지 알려줌 (근데 대부분 서버에서 데이터요청했을때 지연시간임)


크롬 redux DevTools 설치 : 
store한눈에 보여줌, state변경한 내역 알려줌 필요하면 가져다 쓰자

lazy import : single page application 특징이 발행하면 js파일 하나에 모든 코드 다 쑤셔넣음(로딩속도 느림) -> 여러개로 나누면 해경됨

const Detail = lazy(()=> import('./pages/detail.js'))
const Cart = lazy(()=> import('./pages/Cart.js')) 이런 메인 페이지에 바로 노출이 안되는 페이지는 나중에 로드하도록 할 수 있다. 단점은 detail등 페이지로 이동할때 로딩시간이 길어진다. 이때 <Suspense>로 Route전체 감싸면 로딩 중 UI넣기가 가능하다.


memo : 내가 원하는 무거운 자식 컴포넌트의 재랜더링을 막을 수 있음 ex) App.js에서 버튼 눌러서 count를 올렸다면 Detail컴포넌트도 재랜더링이 되는데 이를 막는데 씀 이런것들이 성능 저하를 일으킬 수 있다.

사용법 : import memo 하고
컴포넌트를 만들때
let Detail = memo( function(){
    console.log('재랜더링됨')
    return <div>자식임</div>
})
이런식으로 만들면 이제 꼭 필요할때만 재렌더링 됨

memo의 원리 : props가 변할때만 재렌더링해줌 -> props가 길고 복잡하면 손해일 수도 있다. 그러니까 꼭 필요한 무거운 컴포넌트에만 쓰자(사실 쓸일 별로 없음)


useMemo : 컴포넌트 렌더링 시 1회만 실행해줌 useEffect와 유사한데 실행 시점의 차이가 있다. useEffect는 html을 로드하고 실행, useMemo는 html로드할때 실행



원래는 ajax, setTimeout내부라면 batch기능이 동작하지 않았지만 react18부터는 ajax, setTimeout내부에서도 동작한다.
batch기능 : 
state1변경()
state2변경()
state3변경() -> 여기서만 재렌더링1회


useTransition, useDeferredValue()으로 느린 컴포넌트 성능향상 가능 input에 결과값이 바로바로 나타나고 hmlt렌더링이 좀 늦긴 함

]





[
   PWA셋팅해서 앱으로 발행하기(모바일앱인척하기) == 웹사이트바로가기기능
PWA장점 : 
1. 설치 마케팅 비용 적음
2. 아날로그 유저들 배려
3. html css js만으로 앱까지
4. 푸시알림, 센서 등

PWA 사용하려면 PWA가 세팅된 리엑트프로젝트를 생성해야 한다.
설치 : 작업폴더에(react장인)터미널 열고 npx create-react-app 프로젝트명 --template cra-template-pwa 
프로젝트생성되면 거기서 vscode 열어서 프로젝트 진행

기존 프로젝트를 pwa로 만드는 방법은 없다. 복붙 + 필요 라이브러리 설치 하는수밖에 ㄹㅇ


pwa조건
1. manifest.json : 앱 정보(열어보면설명) 

2. service-worker.js 있어야 함 - 오프라인에서도 사이트 열 수 있게 도와줌 
방법 : 
index.js가서 serviceWorkerRegistration.unregister()에서
serviceWorkerRegistration.register()로 바꿈
그 후 빌드(npm run build) 하면 build 파일 안에 manifest.json은 축약이 되어 있고 serviceWorker.js 구경이 가능하다.

asset-menifest.json은 어떤 파일들을 캐싱할건지 목록(오프라인에서도 이용 가능한 것들 )

pwa가 잘되는걸 확인하려면 호스팅을 받거나
build된걸 VScode로 오픈해서 index.html미리보기 띄우거나 해야 함(live server Extention설치해야함)

liveserver로 오픈하면 상단 바에 설치버튼 있나 확인 (있으면 잘 된거임)

개발자도구로 들어가서 application탭으로 들어가면 PWA설정 확인이 가능하다(메니페스트나 서비스워커, 캐시스토리지 등등 확인 가능함).

특정 파일들은 캐싱 안되게 하고싶다? node_modules/react-scripts/config/webpack.config.js 들어가서 injectManifest에 exclude부분 바꾸면 됨 근데 점찍을때 \.이렇게 해야함 (보통은 건들일필요 없다.)

]




[
Q. node+Express 서버와 React연동

서버는 별거 아니고 어떤 고객이 sanggyeol1.com으로 접속하면 거기 맞는 html을 보내주는 기계일 뿐이다. 

임시 서버를 Node.js + Express로 만드는 법
1. node.js설치
2. 작업폴더만들고 에디터로 오픈
3. server.js 파일을 만들고

    const express = require('express');
    const path = require('path');
    const app = express();

    app.listen(8080, function () {
    console.log('listening on 8080')
    }) 복붙

4. npm init -y
5. npm install express
이러면 웹서버 만들기 끝, 서버 미리보기 띄우고 싶으면 터미널에 nodemon server.js입력, 안되면 node server.js


리액트로 개발을 다 마친 후 npm run build 하면 build라는 폴더가 생기고 안에 html css js파일이 생긴다.

예를들어 server.js 옆에다가 react-project라는 폴더명으로 리액트 프로젝트를 하나 만들었으면

server.js에 
app.use(express.static(path.join(__dirname, 'react-project/build')));

app.get('/', function (요청, 응답) {
  응답.sendFile(path.join(__dirname, '/react-project/build/index.html'));
})

express.static이라는걸 쓰면 특정 폴더안의 파일들을 static파일로 고객들에게 잘 보내줄 수 있다.
그럼 build폴더 안의 css js img 파일도 잘 사용이 가능할 것이다.
그리고 늘 하던대로 누군가 / 페이지로접속하면 리액트로 만든 html보여주는 것이다. 이제 localhost: 8080으로 접속하면 리액트 프로젝트가 나온다.



Q. 리액트에서 라우팅을 담당하는 경우?

서버에서도 라우팅을 담당할 수 있고
리액트에서도 라우팅을 담당해줄 수 있다. 리액트는 react-router-dom을 설치하면 됨 그럼 리액트상에서 누가 /list로 접속하면 글목록 보여주고 /mypage접속하면 마이페이지 보여줄 수 있음

근데 리액트 라우터로 /list페이지를 개발해놨는데 실제 localhost:8080/list 로 직접 URL입력해서 접속하면 아무것도 안뜸
왜냐면 브라우저 URL창에 입력하는건 서버에게 요청하는거지 리액트 라우터에게 라우팅 요청하는게 아님
이걸 리액트에게 전권을 넘기고 싶다면 server.js에 다음과 같은 코드를 밑에 추가해야 한다.(가장 하단)

app.get('*', function (요청, 응답) {
  응답.sendFile(path.join(__dirname, '/react-project/build/index.html'));
}) 고객이 url란에 아무거나 입력하면 그냥 리액트 프로젝트 보내줘 라는 뜻인데 이렇게 하면 리액트 라우팅 잘 됨






Q. 리액트에서 DB데이터 보여주고 싶으면?

예를 들어서 db에서 글목록 데이터를 꺼내서 html로 보여주고 싶은 경우 server-side rendering / client-side rendering 둘 중 하나 선택하면 됨

server-side rendering은 html을 서버가 만들어서 보내주는 것이다.
node.js강의처럼 
1. db에서 데이터 뽑아서 
2. 글목록.html을 파일에 꽂아넣고
3. 그 html파일을 서버에서 보내주는 것

client-side rendering은 html을 리액트가 브라우저 안에서 만드는 것
1. 리액트가 서버에 get요청으로 db데이터를 가져와서
2. 그걸 html로 만들어서 보여주는 것

리액트를 쓰는 경우 보통 client-side rendering을 한다.
그래서db에 있는 상품목록을 가져와서 리액트에 보여주고 싶으면

1. 서버는 누군가 /product로 get요청을 하면 db에서 데이터꺼내서 보여주라고 api를 짜 놓는다.
2. 리액트는 상품목록을 보여주고 싶을 때 서버 / product 주소로 get요청하면 된다.
3. 그럼 데이터를 받고 html에 집어 넣는 등 개발

그래서 리액트는 거의 ajax로 진행한다. POST요청, 로그링해서 세션만들기 이런것도 ajax로 잘 된다.


근데
node.js 서버파일 상단엔
app.use(express.json());
var cors = require('cors');
app.use(cors()) 이 코드 넣고 시작해야 리액트와 node.js서버간 ajax요청 잘됨 이거 쓰려면 서버프로젝트 터미널에서 npm install cors 설치해야 함. express.json()은 유저가 보낸 array/object 데이터를 출력해보기 위해서 필요하고 cors는 다른 도메인주소끼리 ajax요청 주고받을때 필요하다.



Q. 리액트프로젝트 코드 수정할 때 마다 build작업을 해야 하는지?

그럴필요 없다. 그건 나중에 사이트를 aws, google cloud이런 곳에 발행할때만 한번 해주면 됨 평소에 개발할 땐 리액트도 localhost로 미리보기 띄워놓고, 서버도 localhost로 미리보기를 띄워놓고 개발 진행하면 별 문제 없다. 

다만 리액트 - 서버 ajax요청시 /product이렇게 말고 http://서버주소/product 잘 입력하고 
 - 서버에 cors옵션 잘 켜놓으면 된다.

서버주소 입력하는게 귀찮으면  
리액트에서 package.json이라는 파일을 열어서 proxy라는 부분 설정을
서버 미리보기 띄우던 localhost:어쩌구 주소로 설정해주면 됩니다. 
그러면 리액트에서 ajax 요청 대충해도 localhost:어쩌구 주소로 ajax 요청을 알아서 보내줍니다. 

https://create-react-app.dev/docs/proxying-api-requests-in-development/

이걸 참고합시다. 












서브디렉토리에 리액트앱 발행하고 싶은 경우 

지금 메인페이지가 리액트앱인데 그거 말고
/react 이렇게 접속하면 리액트로 만든 html
/ 이렇게 접속하면 public 폴더에 있던 그냥 main.html
보여주고 싶은 경우 어떻게 하냐면 

(server.js)

app.use( '/', express.static( path.join(__dirname, 'public') ))
app.use( '/react', express.static( path.join(__dirname, 'react-project/build') ))

app.get('/', function(요청,응답){
  응답.sendFile( path.join(__dirname, 'public/main.html') )
}) 
app.get('/react', function(요청,응답){
  응답.sendFile( path.join(__dirname, 'react-project/build/index.html') )
})
▲ server.js 라우팅을 이렇게 바꿔주고 

 
(리액트프로젝트 내의 package.json)
{
  "homepage": "/react",
  "version": "0.1.0",
  ... 등
} 
▲ 리액트 프로젝트 내의 package.json에 homepage라는 항목을
여러분이 발행을 원하는 서브디렉토리명으로 새로 기입해주면 됩니다. 
그럼 방금 server.js 에서 /react 접속시 리액트 프로젝트보내고 
/ 접속시 일반 html 파일 보내라고 했으니 정말 그렇게 됩니다. 
딱히 쓸 일은 별로 없습니다. 
]